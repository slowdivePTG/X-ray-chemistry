
!###################################################
! WARNING:This is a test auto-generated by KROME, in order to
! show a bare-minimal code to call the KROME's subroutine.
! Most of the values could not be appropriate for your
! problem, since this test is only intended as a general
! purpose example.

program test_krome

  use krome_main
  use krome_user
  use krome_user_commons
  use krome_ode
  use krome_getphys
  use krome_commons

  implicit none

  integer,parameter::nx=krome_nmols
  real*8::x(nx),m(nx+24),Tgas,t,dt,spy,xH,j21xs,dust2gas,x1(nx),x2(nx)
  real*8::ncolH, ncolHe
  integer::i,j
  spy = 3600. * 24. * 365. !seconds per year
  Tgas = 1d1 !gas temperature (K)
  xH = 2e4 !Hydrogen density

  !user commons for opacity and CR rate
  call krome_set_user_av(1d1) !opacity Av (#)E11.3,
  call krome_set_user_gas_dust_ratio(7.57d11) !gas/dust

  call krome_init()

  x(:) = 0d0
  !initial densities (model EA1 Wakelam+Herbst 2008)
  x(KROME_idx_H2)  = 5d-1   * xH
  x(KROME_idx_He)  = 1.4e-1   * xH
  x(KROME_idx_N)   = 2.14e-5  * xH
  x(KROME_idx_O)   = 1.76d-4 * xH
  x(KROME_idx_Cj)  = 7.3d-5 * xH
  x(KROME_idx_Sj)  = 8d-8 * xH
  x(KROME_idx_Sij)  = 8d-9 * xH
  x(KROME_idx_Fej)  = 3d-9 * xH
  x(KROME_idx_Naj)  = 2d-9 * xH
  x(KROME_idx_Mgj) = 7d-9  * xH
  x(KROME_idx_Clj)  = 1d-9 * xH
  x(KROME_idx_Pj)  = 2d-10 * xH
  x(KROME_idx_Fj)  = 6.68d-9 * xH

  !calculate elctrons (neutral cloud)
  x(KROME_idx_e) = krome_get_electrons(x(:))

  !NOTE: here myCoe array is employed to store the
  ! coefficient values, since the temperature is
  ! constant during the model evolution.
  ! myCoe(:) is defined in krome_user_commons
  !myCoe(:) = krome_get_coef(Tgas,x(:))

  dt = 1d2*spy !time-step (s)
  t = 0d0 !initial time (s)

  call krome_set_user_crate(1.3d-17) !CR rate (1/s)
  !output header
  open(unit=66, file="./data/EA1")
  write(66,'(a)') "#zeta=1.3e-17/s"
  !write(77,'(a)') "#Jx21=8"
  write(66,'(a)') "#time "//trim(krome_get_names_header())
  x1(:)=x(:)

  do
     print '(a10,E11.3,a3)',"time:",t/spy,"yr"
     call krome(x1(:),Tgas,dt) !call KROME
     !call jex(nx,t,x1(:),"./data/Trace5_0")
     t = t + dt !increase time
     dt = max(dt,t/3d0) !increase time-step
     write(66,'(999E15.5)') t/spy,x1(:)/xH
     if(t>1d8*spy) exit !exit when overshoot 5d6 years
  end do

  call krome_init()

  x(:) = 0d0
  !initial densities (model EA2 Wakelam+Herbst 2008)
  x(KROME_idx_H2)  = 5d-1   * xH
  x(KROME_idx_He)  = 9d-2   * xH
  x(KROME_idx_N)   = 7.6d-5  * xH
  x(KROME_idx_O)   = 2.56d-4 * xH
  x(KROME_idx_Cj)  = 1.2d-4 * xH
  x(KROME_idx_Sj)  = 1.5d-5 * xH
  x(KROME_idx_Sij)  = 1.7d-6 * xH
  x(KROME_idx_Fej)  = 2d-7 * xH
  x(KROME_idx_Naj)  = 2d-7 * xH
  x(KROME_idx_Mgj) = 2.4d-6  * xH
  x(KROME_idx_Clj)  = 1.8d-7 * xH
  x(KROME_idx_Pj)  = 1.17d-7 * xH
  x(KROME_idx_Fj)  = 1.8d-8 * xH

  !calculate elctrons (neutral cloud)
  x(KROME_idx_e) = krome_get_electrons(x(:))

  !NOTE: here myCoe array is employed to store the
  ! coefficient values, since the temperature is
  ! constant during the model evolution.
  ! myCoe(:) is defined in krome_user_commons
  !myCoe(:) = krome_get_coef(Tgas,x(:))

  dt = 1d2*spy !time-step (s)
  t = 0d0 !initial time (s)

  call krome_set_user_crate(1.3d-17) !CR rate (1/s)

  !output header
  open(unit=77, file="./data/EA2")
  write(77,'(a)') "#zeta=1.3e-17/s"
  !write(77,'(a)') "#Jx21=8"
  write(77,'(a)') "#time "//trim(krome_get_names_header())
  x1(:)=x(:)

  do
     print '(a10,E11.3,a3)',"time:",t/spy,"yr"
     call krome(x1(:),Tgas,dt) !call KROME
     !call jex(nx,t,x1(:),"./data/Trace5_0")
     t = t + dt !increase time
     dt = max(dt,t/3d0) !increase time-step
     write(77,'(999E15.5)') t/spy,x1(:)/xH
     if(t>1d8*spy) exit !exit when overshoot 5d6 years
  end do

  call krome_init()

  x(:) = 0d0
  !initial densities (model EA3 Wakelam+Herbst 2008)
  x(KROME_idx_H2)  = 5d-1   * xH
  x(KROME_idx_He)  = 9d-2   * xH
  x(KROME_idx_N)   = 7.6d-5  * xH
  x(KROME_idx_O)   = 2.56d-4 * xH
  x(KROME_idx_Cj)  = 1.2d-4 * xH
  x(KROME_idx_Sj)  = 1.5d-5 * xH
  x(KROME_idx_Sij)  = 0d0 * xH
  x(KROME_idx_Fej)  = 1.5d-8 * xH
  x(KROME_idx_Naj)  = 2d-7 * xH
  x(KROME_idx_Mgj) = 0d0  * xH
  x(KROME_idx_Clj)  = 1.8d-8 * xH
  x(KROME_idx_Pj)  = 1.17d-7 * xH
  x(KROME_idx_Fj)  = 6.68e-9 * xH

  !calculate elctrons (neutral cloud)
  x(KROME_idx_e) = krome_get_electrons(x(:))

  !NOTE: here myCoe array is employed to store the
  ! coefficient values, since the temperature is
  ! constant during the model evolution.
  ! myCoe(:) is defined in krome_user_commons
  !myCoe(:) = krome_get_coef(Tgas,x(:))

  dt = 1d2*spy !time-step (s)
  t = 0d0 !initial time (s)

  call krome_set_user_crate(1.3d-17) !CR rate (1/s)

  !output header
  open(unit=77, file="./data/EA3")
  write(77,'(a)') "#zeta=1.3e-17/s"
  !write(77,'(a)') "#Jx21=8"
  write(77,'(a)') "#time "//trim(krome_get_names_header())
  x1(:)=x(:)

  do
     print '(a10,E11.3,a3)',"time:",t/spy,"yr"
     call krome(x1(:),Tgas,dt) !call KROME
     !call jex(nx,t,x1(:),"./data/Trace5_0")
     t = t + dt !increase time
     dt = max(dt,t/3d0) !increase time-step
     write(77,'(999E15.5)') t/spy,x1(:)/xH
     if(t>1d8*spy) exit !exit when overshoot 5d6 years
  end do
end program test_krome
